/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package quanli.ton.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import quanli.ton.controller.QlyTonController;
import quanli.ton.dao.BillDao;
import quanli.ton.dao.BillDetailDao;
import quanli.ton.dao.CustomerDao;
import quanli.ton.dao.ProductTypeDAO;
import quanli.ton.dao.ProductsDAO;
import quanli.ton.dao.ThicknessDAO;
import quanli.ton.dao.impl.BillDaoImpl;
import quanli.ton.dao.impl.BillDetailDAOImpl;
import quanli.ton.dao.impl.CustomerDaoImpl;
import quanli.ton.dao.impl.ProductTypeDAOImpl;
import quanli.ton.dao.impl.ProductsDAOimpl;
import quanli.ton.dao.impl.ThicknessDAOImpl;
import quanli.ton.entity.BillDetails;
import quanli.ton.entity.Bills;
import quanli.ton.entity.Customer;
import quanli.ton.entity.Product;
import quanli.ton.entity.ProductType;
import quanli.ton.entity.Thickness;
import quanli.ton.ui.components.ButtonEditor;
import quanli.ton.ui.components.ButtonRenderer;
import quanli.ton.ui.components.SpinnerEditor;
import quanli.ton.util.TimeRange;
import quanli.ton.util.XAuth;
import quanli.ton.util.XDate;
import quanli.ton.util.XDialog;
import quanli.ton.util.XIcon;

/**
 *
 * @author hieud
 */
public class QlyTonJFrame extends javax.swing.JFrame implements QlyTonController {

    // Kích thước ban đầu của navbar
    int x = 0; // chieu rong
    int y = 900; // chieu cao

    private boolean isBillChanging;
    private boolean isCustomerChanging;
    private Bills currentBill = new Bills();
    private Customer currentCustomer = null;
    private DecimalFormat moneyFormat = new DecimalFormat("#,##0 VNĐ"); // format tiền
    JPanel glassPane = new JPanel();

    BillDao billDao = new BillDaoImpl();
    BillDetailDao billDetailDao = new BillDetailDAOImpl();
    CustomerDao customerDao = new CustomerDaoImpl();
    ProductTypeDAO typeDao = new ProductTypeDAOImpl();
    ThicknessDAO thicknessDao = new ThicknessDAOImpl();
    ProductsDAO productDao = new ProductsDAOimpl();

    List<BillDetails> billDetailsList = new ArrayList<>();
    List<ProductType> typeList = List.of();
    List<Thickness> thickList = List.of();
    List<Product> productList = List.of();
    List<Bills> billList = List.of();

    /**
     * Creates new form MainJForm
     */
    public QlyTonJFrame() {
        initComponents();
        this.init();
        this.addTabPanelListener();
        this.createSlideMenu();
        this.open();
    }

    @Override
    public void init() {
        setLocationRelativeTo(null); // căn giữa màn hình
        this.setIconImage(XIcon.getIcon("logo_512.png").getImage());

        if (!this.showWelcomeJDialog(this)) { // Để khi user nhấn nút tắt thì sẽ tắt luôn chương trình thay vì hiện tiếp login
            System.exit(0);
        }
        if (!this.showLoginJDialog(this)) { // Để khi user nhấn nút tắt thì sẽ tắt luôn chương trình thay vì hiện tiếp trang chính
            System.exit(0);
        }
        XIcon.setIcon(lbAvatar, "img/avatars/" + XAuth.user.getPhoto());
        lbFullname.setText(XAuth.user.getFullname());

        System.out.println(XAuth.user.isManager());
        if (!XAuth.user.isManager()) {
            jplSlideMenu.remove(pnlAdmin);
        }

        // config table
        tblBillDetails.getColumnModel().getColumn(4).setCellEditor(new SpinnerEditor(this));
        tblBillDetails.getColumnModel().getColumn(8).setCellRenderer(new ButtonRenderer());
        tblBillDetails.getColumnModel().getColumn(8).setCellEditor(new ButtonEditor(this));
        
        tabMain.setFont(new Font("Segoe UI", Font.BOLD, 14));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jplSlideMenu = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        lblCloseMenu = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        pnlAdmin = new javax.swing.JPanel();
        lbProductType = new javax.swing.JLabel();
        lbUser = new javax.swing.JLabel();
        lbProduct = new javax.swing.JLabel();
        lbBills = new javax.swing.JLabel();
        lbThickness = new javax.swing.JLabel();
        lbRevenue = new javax.swing.JLabel();
        lbCustomer = new javax.swing.JLabel();
        lb = new javax.swing.JLabel();
        lbLogout = new javax.swing.JLabel();
        lbHistory = new javax.swing.JLabel();
        lbExit = new javax.swing.JLabel();
        lbChangePassword = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        lbFullname = new javax.swing.JLabel();
        lbAvatar = new javax.swing.JLabel();
        txtProductSearch = new javax.swing.JTextField();
        btnProductSearch = new javax.swing.JButton();
        lblOpenMenu = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        tabMain = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBillDetails = new javax.swing.JTable() {
            @Override
            public JTableHeader getTableHeader() {
                JTableHeader header = super.getTableHeader();
                header.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 13));
                header.setBackground(new java.awt.Color(224, 255, 255));  // pastel xanh ngọc
                header.setForeground(new java.awt.Color(0, 102, 102));    // xanh đậm
                ((javax.swing.table.DefaultTableCellRenderer) header.getDefaultRenderer())
                .setHorizontalAlignment(javax.swing.JLabel.CENTER);
                return header;
            }
        };
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JTextField();
        txtCustomerName = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNote = new javax.swing.JTextArea();
        jLabel31 = new javax.swing.JLabel();
        txtStatus = new javax.swing.JLabel();
        txtDeposit = new javax.swing.JFormattedTextField();
        sldDiscount = new javax.swing.JSlider();
        txtDiscountPercent = new javax.swing.JLabel();
        txtOverall = new javax.swing.JLabel();
        txtRemaining = new javax.swing.JLabel();
        btnPrint = new javax.swing.JButton();
        btnCancle = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        cboThickness = new javax.swing.JComboBox<>();
        cboProductType = new javax.swing.JComboBox<>();
        jScrollPane4 = jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(20);
        ;
        pnlProducts = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        cboTimeRange = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtBegin = new javax.swing.JTextField();
        txtEnd = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBills = new javax.swing.JTable() {
            @Override
            public JTableHeader getTableHeader() {
                JTableHeader header = super.getTableHeader();
                header.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 13));
                header.setBackground(new java.awt.Color(224, 255, 255));  // pastel xanh ngọc
                header.setForeground(new java.awt.Color(0, 102, 102));    // xanh đậm
                ((javax.swing.table.DefaultTableCellRenderer) header.getDefaultRenderer())
                .setHorizontalAlignment(javax.swing.JLabel.CENTER);
                return header;
            }
        };
        jLabel6 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        cboSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tôn Hoa Mai");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setForeground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setPreferredSize(new java.awt.Dimension(1200, 850));
        jLayeredPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLayeredPane1MouseClicked(evt);
            }
        });
        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jplSlideMenu.setBackground(new java.awt.Color(255, 255, 255));
        jplSlideMenu.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(153, 153, 153)));
        jplSlideMenu.setPreferredSize(new java.awt.Dimension(210, 820));
        jplSlideMenu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(153, 153, 153)));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCloseMenu.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        lblCloseMenu.setForeground(new java.awt.Color(0, 102, 102));
        lblCloseMenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCloseMenu.setText("X");
        lblCloseMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblCloseMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCloseMenuMouseClicked(evt);
            }
        });
        jPanel9.add(lblCloseMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 2, 30, 30));

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logo_256.png"))); // NOI18N
        jPanel9.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 10, 220, 150));

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jPanel9.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 20, -1, 114));

        jSeparator1.setBackground(new java.awt.Color(0, 102, 102));
        jSeparator1.setForeground(new java.awt.Color(0, 102, 102));
        jPanel9.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 210, 10));

        jplSlideMenu.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 170));

        pnlAdmin.setBackground(new java.awt.Color(255, 255, 255));
        pnlAdmin.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(153, 153, 153)));

        lbProductType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbProductType.setForeground(new java.awt.Color(0, 102, 102));
        lbProductType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbProductType.setText("Quản lý Loại sản phẩm");
        lbProductType.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbProductType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbProductTypeMouseClicked(evt);
            }
        });

        lbUser.setBackground(new java.awt.Color(255, 255, 255));
        lbUser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbUser.setForeground(new java.awt.Color(0, 102, 102));
        lbUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbUser.setText("Quản lý Nhân viên");
        lbUser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbUserMouseClicked(evt);
            }
        });

        lbProduct.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbProduct.setForeground(new java.awt.Color(0, 102, 102));
        lbProduct.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbProduct.setText("Quản lý Sản phẩm");
        lbProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbProductMouseClicked(evt);
            }
        });

        lbBills.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbBills.setForeground(new java.awt.Color(0, 102, 102));
        lbBills.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbBills.setText("Quản lý Hóa đơn");
        lbBills.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbBills.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbBillsMouseClicked(evt);
            }
        });

        lbThickness.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbThickness.setForeground(new java.awt.Color(0, 102, 102));
        lbThickness.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbThickness.setText("Quản lý Độ dày sản phẩm");
        lbThickness.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbThickness.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbThicknessMouseClicked(evt);
            }
        });

        lbRevenue.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbRevenue.setForeground(new java.awt.Color(0, 102, 102));
        lbRevenue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbRevenue.setText("Quản lý Doanh thu");
        lbRevenue.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbRevenue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbRevenueMouseClicked(evt);
            }
        });

        lbCustomer.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbCustomer.setForeground(new java.awt.Color(0, 102, 102));
        lbCustomer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbCustomer.setText("Quản lý Khách hàng");
        lbCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbCustomerMouseClicked(evt);
            }
        });

        lb.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lb.setForeground(new java.awt.Color(0, 102, 102));
        lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb.setText("Quản lý hàng tồn kho");
        lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlAdminLayout = new javax.swing.GroupLayout(pnlAdmin);
        pnlAdmin.setLayout(pnlAdminLayout);
        pnlAdminLayout.setHorizontalGroup(
            pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminLayout.createSequentialGroup()
                .addComponent(lbProductType, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlAdminLayout.createSequentialGroup()
                .addGroup(pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAdminLayout.createSequentialGroup()
                        .addGroup(pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbBills, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbThickness, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbRevenue, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lb, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlAdminLayout.setVerticalGroup(
            pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(lbRevenue, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbBills, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbProductType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbThickness, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lb, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        jplSlideMenu.add(pnlAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 210, 480));

        lbLogout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbLogout.setForeground(new java.awt.Color(0, 102, 102));
        lbLogout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbLogout.setText("Đăng xuất");
        lbLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbLogoutMouseClicked(evt);
            }
        });
        jplSlideMenu.add(lbLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 760, 210, 30));

        lbHistory.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbHistory.setForeground(new java.awt.Color(0, 102, 102));
        lbHistory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbHistory.setText("Lịch sử");
        lbHistory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbHistoryMouseClicked(evt);
            }
        });
        jplSlideMenu.add(lbHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 680, 210, 30));

        lbExit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbExit.setForeground(new java.awt.Color(234, 84, 60));
        lbExit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbExit.setText("Thoát");
        lbExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbExitMouseClicked(evt);
            }
        });
        jplSlideMenu.add(lbExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 800, 210, 30));

        lbChangePassword.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbChangePassword.setForeground(new java.awt.Color(0, 102, 102));
        lbChangePassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbChangePassword.setText("Đổi mật khẩu");
        lbChangePassword.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbChangePassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbChangePasswordMouseClicked(evt);
            }
        });
        jplSlideMenu.add(lbChangePassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 720, 210, 30));

        jSeparator3.setBackground(new java.awt.Color(0, 102, 102));
        jSeparator3.setForeground(new java.awt.Color(0, 102, 102));
        jplSlideMenu.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 660, 210, 10));

        jLayeredPane1.add(jplSlideMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 260, 820));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setEnabled(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 850));

        lbFullname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbFullname.setForeground(new java.awt.Color(0, 102, 102));
        lbFullname.setText("Admin 1");

        lbAvatar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtProductSearch.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10)));

        btnProductSearch.setBackground(new java.awt.Color(0, 102, 102));
        btnProductSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnProductSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnProductSearch.setText("Tìm");
        btnProductSearch.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 150, 136), 1, true));
        btnProductSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductSearchActionPerformed(evt);
            }
        });

        lblOpenMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/menu.png"))); // NOI18N
        lblOpenMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblOpenMenuMouseClicked(evt);
            }
        });

        tabMain.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 1, true));

        tblBillDetails.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        tblBillDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "4", "hàng1", "500", "1", null, "0%", "1", null},
                { new Integer(2), "5", "hàng2", "1000", "1", null, "0%", "1", null},
                { new Integer(3), "6", "hàng3", "15000", "1", null, "0%", null, null}
            },
            new String [] {
                "STT", "Mã hàng hóa", "Tên hàng hóa", "Đơn giá", "Số lượng", "Độ dài", "Giảm giá", "Thành tiền", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblBillDetails);
        if (tblBillDetails.getColumnModel().getColumnCount() > 0) {
            tblBillDetails.getColumnModel().getColumn(0).setPreferredWidth(40);
            tblBillDetails.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblBillDetails.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblBillDetails.getColumnModel().getColumn(3).setPreferredWidth(90);
            tblBillDetails.getColumnModel().getColumn(4).setPreferredWidth(60);
            tblBillDetails.getColumnModel().getColumn(5).setPreferredWidth(60);
            tblBillDetails.getColumnModel().getColumn(6).setPreferredWidth(60);
            tblBillDetails.getColumnModel().getColumn(7).setPreferredWidth(120);
            tblBillDetails.getColumnModel().getColumn(8).setPreferredWidth(60);
        }

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 1, true));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Khách hàng");

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102)));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Số điện thoại:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Tên khách hàng:");

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel30.setText("Địa chỉ:");

        txtPhoneNumber.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 150, 136), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10)));
        txtPhoneNumber.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPhoneNumberFocusLost(evt);
            }
        });

        txtCustomerName.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 150, 136), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10)));
        txtCustomerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustomerNameKeyReleased(evt);
            }
        });

        txtAddress.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 150, 136), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10)));
        txtAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAddressKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel30))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtPhoneNumber)
                    .addComponent(txtCustomerName)
                    .addComponent(txtAddress))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jLabel11.setText("Tổng tiền hàng:");

        jLabel12.setText("Giảm giá:");

        jLabel13.setText("Đặt cọc:");

        jLabel14.setText("Còn lại:");

        jLabel15.setText("Trạng thái:");

        btnSave.setBackground(new java.awt.Color(0, 102, 102));
        btnSave.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Lưu");
        btnSave.setBorder(null);
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtNote.setColumns(20);
        txtNote.setRows(5);
        txtNote.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102)), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        txtNote.setCaretColor(new java.awt.Color(0, 102, 102));
        jScrollPane2.setViewportView(txtNote);

        jLabel31.setText("Ghi chú:");

        txtStatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtStatus.setText("Đang xử lí");

        txtDeposit.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 150, 136), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10)));
        txtDeposit.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        txtDeposit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDepositKeyReleased(evt);
            }
        });

        sldDiscount.setForeground(new java.awt.Color(0, 102, 102));
        sldDiscount.setMinorTickSpacing(1);
        sldDiscount.setValue(0);
        sldDiscount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldDiscountStateChanged(evt);
            }
        });
        sldDiscount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sldDiscountMouseReleased(evt);
            }
        });

        txtDiscountPercent.setText("0%");

        txtOverall.setText("0");

        txtRemaining.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtRemaining.setText("0");

        btnPrint.setBackground(new java.awt.Color(230, 184, 92));
        btnPrint.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnPrint.setForeground(new java.awt.Color(255, 255, 255));
        btnPrint.setText("In");
        btnPrint.setBorder(null);
        btnPrint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnCancle.setBackground(new java.awt.Color(204, 51, 51));
        btnCancle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCancle.setForeground(new java.awt.Color(255, 255, 255));
        btnCancle.setText("Hủy đơn");
        btnCancle.setBorder(null);
        btnCancle.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancleActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(158, 158, 158));
        btnRefresh.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Làm mới");
        btnRefresh.setBorder(null);
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 322, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(btnCancle, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtStatus))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(46, 46, 46)
                                .addComponent(sldDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDiscountPercent))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtOverall, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(53, 53, 53)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDeposit, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRemaining, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtOverall))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(sldDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDiscountPercent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtDeposit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtRemaining))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancle, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel21.setText("Danh sách sản phẩm:");

        cboThickness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboThicknessActionPerformed(evt);
            }
        });

        cboProductType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboProductType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProductTypeActionPerformed(evt);
            }
        });

        jScrollPane4.setForeground(new java.awt.Color(0, 102, 102));
        jScrollPane4.setToolTipText("");

        pnlProducts.setBackground(new java.awt.Color(255, 255, 255));
        pnlProducts.setLayout(new java.awt.GridLayout(0, 4, 5, 5));
        jScrollPane4.setViewportView(pnlProducts);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cboProductType, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboThickness, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(cboThickness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboProductType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tabMain.addTab("BÁN HÀNG", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        cboTimeRange.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboTimeRange.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hôm nay", "Tuần này", "Tháng này", "Quý này", "Năm nay" }));
        cboTimeRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimeRangeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Từ ngày:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Đến ngày:");

        txtBegin.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBegin.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 150, 136), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10)));
        txtBegin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBeginActionPerformed(evt);
            }
        });

        txtEnd.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtEnd.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 150, 136), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10)));

        btnFilter.setBackground(new java.awt.Color(0, 102, 102));
        btnFilter.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnFilter.setForeground(new java.awt.Color(255, 255, 255));
        btnFilter.setText("Lọc");
        btnFilter.setRolloverEnabled(false);
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 1, true));

        tblBills.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        tblBills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã phiếu", "Nhân viên xử lí", "Tên khách hàng", "Thời điểm tạo phiếu", "Thời điểm thanh toán"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBills.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tblBills.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBillsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBills);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Tìm kiếm");

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 150, 136), 1, true), javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10)));

        cboSearchType.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Theo số hóa đơn", "Theo số điện thoại khách hàng" }));
        cboSearchType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSearchTypeActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(0, 102, 102));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Tìm kiếm");
        btnSearch.setRolloverEnabled(false);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(txtSearch)
                    .addComponent(cboSearchType, 0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(btnFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtEnd)
                    .addComponent(txtBegin)
                    .addComponent(cboTimeRange, 0, 214, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 896, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(400, 400, 400)
                .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(cboSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(cboTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(296, 296, 296))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        btnFilter.getAccessibleContext().setAccessibleName("");
        btnSearch.getAccessibleContext().setAccessibleName("");

        tabMain.addTab("HÓA ĐƠN", jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tabMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblOpenMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbFullname, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(319, 319, 319)
                        .addComponent(txtProductSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProductSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 54, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtProductSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbFullname)
                            .addComponent(btnProductSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(lblOpenMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabMain, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLayeredPane1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 1200, 810));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProductSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductSearchActionPerformed
        // TODO add your handling code here:
        String textInput = txtProductSearch.getText();
        cboProductType.setSelectedIndex(0);
        cboThickness.removeAll();
        if (textInput.equals("")) {
            productList = productDao.findAll();
        } else {
            productList = productDao.findProductByName(textInput);
        }

        this.loadProduct();
    }//GEN-LAST:event_btnProductSearchActionPerformed

    private void cboProductTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProductTypeActionPerformed
        // TODO add your handling code here:
        int index = cboProductType.getSelectedIndex();
        if (index > 0) {
            ProductType type = typeList.get(index - 1); // Do trong combo box có thêm 'Tất cả' nên size = typeList + 1
            // => phải trừ 1
            this.fillThicknesCbo(type.getId());
        } else {
            cboThickness.removeAll();
        }

        this.applyFilters();
    }//GEN-LAST:event_cboProductTypeActionPerformed

    private void cboThicknessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboThicknessActionPerformed
        // TODO add your handling code here:
        this.applyFilters();
    }//GEN-LAST:event_cboThicknessActionPerformed

    private void lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMouseClicked
        // TODO add your handling code here:
        this.showStockManagementDialog(this);
    }//GEN-LAST:event_lbMouseClicked

    private void txtDepositKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtDepositKeyReleased
        // TODO add your handling code here:
        // Lấy giá trị từ txtOverall và chuyển sang kiểu Double
        double overall = Double.parseDouble(txtOverall.getText().replaceAll("[^\\d.]", "")); // Xóa hết ký tự không phải
        // số hoặc dấu chấm ( VNĐ )

        // Lấy giá trị từ txtDeposit và chuyển sang kiểu Double
        double value = Double.parseDouble(txtAddress.getText().replaceAll("[^\\d.]", "")); // Xóa hết ký tự không phải
        // số hoặc dấu chấm ( VNĐ )

        if (value > overall) {
            XDialog.alert("Số tiền đặt cọc cao hơn so với tổng số tiền");
            txtDeposit.setText(moneyFormat.format(txtDeposit.getValue())); // hiển thị về lại giá trị trước đó
        }

        this.billTotalChange(overall);
        isBillChanging = true;
    }// GEN-LAST:event_txtDepositKeyReleased

    private void lblCloseMenuMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lblCloseMenuMouseClicked
        this.closeMenu();
        // TODO add your handling code here:
    }// GEN-LAST:event_lblCloseMenuMouseClicked

    private void lblOpenMenuMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lblOpenMenuMouseClicked
        // TODO add your handling code here:
        this.openMenu();
    }// GEN-LAST:event_lblOpenMenuMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        this.save();
    }// GEN-LAST:event_btnSaveActionPerformed

    private void sldDiscountStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_sldDiscountStateChanged
        // TODO add your handling code here:
        txtDiscountPercent.setText(sldDiscount.getValue() + "%");
    }// GEN-LAST:event_sldDiscountStateChanged

    private void sldDiscountMouseReleased(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_sldDiscountMouseReleased
        // TODO add your handling code here:
        String overall = txtOverall.getText().replaceAll("[^\\d.]", ""); // Xóa hết ký tự không phải số hoặc dấu chấm (
        // VNĐ )
        this.billTotalChange(Long.parseLong(overall));
        isBillChanging = true;
    }// GEN-LAST:event_sldDiscountMouseReleased

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        this.print();
    }// GEN-LAST:event_btnPrintActionPerformed

    private void btnCancleActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnCancleActionPerformed
        // TODO add your handling code here:
        this.cancle();
    }// GEN-LAST:event_btnCancleActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        this.clear();
    }// GEN-LAST:event_btnRefreshActionPerformed

    private void txtBeginActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_txtBeginActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_txtBeginActionPerformed

    private void jLayeredPane1MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLayeredPane1MouseClicked
        // TODO add your handling code here:
        System.out.println(tabMain.getSelectedIndex());
    }// GEN-LAST:event_jLayeredPane1MouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        this.fillBillBySearch();
    }// GEN-LAST:event_btnSearchActionPerformed

    private void cboTimeRangeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cboTimeRangeActionPerformed
        // TODO add your handling code here:
        this.selectTimeRange();
    }// GEN-LAST:event_cboTimeRangeActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnFilterActionPerformed
        // TODO add your handling code here:
        this.fillBillsByTimeRange();
    }// GEN-LAST:event_btnFilterActionPerformed

    private void cboSearchTypeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cboSearchTypeActionPerformed
        // TODO add your handling code here:

    }// GEN-LAST:event_cboSearchTypeActionPerformed

    private void lbRevenueMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbRevenueMouseClicked
        // TODO add your handling code here:
        this.showRevenueManagerJDialog(this);
    }// GEN-LAST:event_lbRevenueMouseClicked

    private void lbUserMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbUserMouseClicked
        // TODO add your handling code here:
        this.showUserManagerJDialog(this);
    }// GEN-LAST:event_lbUserMouseClicked

    private void lbBillsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbBillsMouseClicked
        // TODO add your handling code here:
        this.showBillManagerJDialog(this);
    }// GEN-LAST:event_lbBillsMouseClicked

    private void lbProductMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbProductMouseClicked
        // TODO add your handling code here:
        this.showProductManagerJDialog(this);
    }// GEN-LAST:event_lbProductMouseClicked

    private void lbProductTypeMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbProductTypeMouseClicked
        // TODO add your handling code here:
        this.showProductTypeManagerJDialog(this);
    }// GEN-LAST:event_lbProductTypeMouseClicked

    private void lbThicknessMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbThicknessMouseClicked
        // TODO add your handling code here:
        this.showThicknessManagerJDialog(this);
    }// GEN-LAST:event_lbThicknessMouseClicked

    private void lbCustomerMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbCustomerMouseClicked
        // TODO add your handling code here:
        this.showCustomerManagerJDialog(this);
    }// GEN-LAST:event_lbCustomerMouseClicked

    private void lbHistoryMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbHistoryMouseClicked
        // TODO add your handling code here:
        this.showHistoryJDialog(this);
    }// GEN-LAST:event_lbHistoryMouseClicked

    private void lbChangePasswordMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbChangePasswordMouseClicked
        // TODO add your handling code here:
        this.showChangePasswordJDialog(this);
    }// GEN-LAST:event_lbChangePasswordMouseClicked

    private void lbExitMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbExitMouseClicked
        // TODO add your handling code here:
        this.exit();
    }// GEN-LAST:event_lbExitMouseClicked

    private void lbLogoutMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lbLogoutMouseClicked
        // TODO add your handling code here:
        XDialog.alert("Chưa làm chức năng này");
    }// GEN-LAST:event_lbLogoutMouseClicked



    private void tblBillsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tblBillsMouseClicked
        // TODO add your handling code here:

        if (evt.getClickCount() == 2) {
            int index = tblBills.getSelectedRow();
            this.fillBill(billList.get(index));
            tabMain.setSelectedIndex(0);
        }
    }// GEN-LAST:event_tblBillsMouseClicked

    private void txtCustomerNameKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtCustomerNameKeyReleased
        // TODO add your handling code here:
        isCustomerChanging = true;
    }// GEN-LAST:event_txtCustomerNameKeyReleased

    private void txtPhoneNumberFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtPhoneNumberFocusLost
        // TODO add your handling code here:
        currentCustomer = this.findCustomer(txtPhoneNumber.getText());

        this.fillCustomer(txtPhoneNumber.getText());

        isBillChanging = true;
    }// GEN-LAST:event_txtPhoneNumberFocusLost

    private void txtAddressKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtAddressKeyReleased
        // TODO add your handling code here:
        isCustomerChanging = true;
    }// GEN-LAST:event_txtAddressKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            UIManager.setLookAndFeel(new com.formdev.flatlaf.FlatIntelliJLaf()); // Dùng thư viện FlatLaf
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QlyTonJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QlyTonJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancle;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnProductSearch;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cboProductType;
    private javax.swing.JComboBox<String> cboSearchType;
    private javax.swing.JComboBox<String> cboThickness;
    private javax.swing.JComboBox<String> cboTimeRange;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel jplSlideMenu;
    private javax.swing.JLabel lb;
    private javax.swing.JLabel lbAvatar;
    private javax.swing.JLabel lbBills;
    private javax.swing.JLabel lbChangePassword;
    private javax.swing.JLabel lbCustomer;
    private javax.swing.JLabel lbExit;
    private javax.swing.JLabel lbFullname;
    private javax.swing.JLabel lbHistory;
    private javax.swing.JLabel lbLogout;
    private javax.swing.JLabel lbProduct;
    private javax.swing.JLabel lbProductType;
    private javax.swing.JLabel lbRevenue;
    private javax.swing.JLabel lbThickness;
    private javax.swing.JLabel lbUser;
    private javax.swing.JLabel lblCloseMenu;
    private javax.swing.JLabel lblOpenMenu;
    private javax.swing.JPanel pnlAdmin;
    private javax.swing.JPanel pnlProducts;
    private javax.swing.JSlider sldDiscount;
    private javax.swing.JTabbedPane tabMain;
    private javax.swing.JTable tblBillDetails;
    private javax.swing.JTable tblBills;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtBegin;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JFormattedTextField txtDeposit;
    private javax.swing.JLabel txtDiscountPercent;
    private javax.swing.JTextField txtEnd;
    private javax.swing.JTextArea txtNote;
    private javax.swing.JLabel txtOverall;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtProductSearch;
    private javax.swing.JLabel txtRemaining;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JLabel txtStatus;
    // End of variables declaration//GEN-END:variables

    private void createSlideMenu() {
        // Tạo slideMenu
        jplSlideMenu.setBounds(0, 0, 0, 820);
        getLayeredPane().add(jplSlideMenu, JLayeredPane.POPUP_LAYER);

        // Taoj glassPane -> chặn click xuống JPanel1 khi click ở slideMenu
        glassPane.setOpaque(false);
        glassPane.setBounds(0, 0, getWidth(), getHeight());
        glassPane.addMouseListener(new MouseAdapter() {
        }); // Bắt mọi sự kiện để block
        getLayeredPane().add(glassPane, JLayeredPane.MODAL_LAYER);
        glassPane.setVisible(false); // Ẩn lúc đầu
    }

    private void addTabPanelListener() {
        tabMain.addChangeListener((javax.swing.event.ChangeEvent evt) -> {
            int selectedIndex = tabMain.getSelectedIndex();

            if (selectedIndex == 1) {
                // Gọi hàm để load bảng hóa đơn
                checkBillValid();
            }
        });
    }

    private void checkBillValid() {

        if (billDetailsList.isEmpty()) {
            this.clear();
            return;
        }

        if (isBillChanging) {
            tabMain.setSelectedIndex(0);
            if (XDialog.confirm("Bạn có muốn lưu hóa đơn hiện tại?")) {
                this.save();
            } else {

            }
        }
    }

    public void openMenu() {
        if (x == 0) {
            glassPane.setVisible(true); // Chặn tương tác nền

            Timer openTimer = new Timer(1, null);
            openTimer.addActionListener(new ActionListener() {
                int i = 0;

                @Override
                public void actionPerformed(ActionEvent e) {
                    if (i <= 210) {
                        jplSlideMenu.setSize(i, y);
                        i += 5;
                    } else {
                        jplSlideMenu.setSize(210, y);
                        x = 210;
                        openTimer.stop();
                    }
                    jplSlideMenu.revalidate();
                    jplSlideMenu.repaint();
                }
            });
            openTimer.start();
        }
    }

    public void closeMenu() {
        if (x == 210) {
            Timer closeTimer = new Timer(1, null);
            closeTimer.addActionListener(new ActionListener() {
                int i = 210;

                @Override
                public void actionPerformed(ActionEvent e) {
                    if (i >= 0) {
                        jplSlideMenu.setSize(i, y);
                        i -= 5;
                    } else {
                        jplSlideMenu.setSize(0, y);
                        x = 0;
                        closeTimer.stop();
                        glassPane.setVisible(false); // Cho phép tương tác nền
                    }
                    jplSlideMenu.revalidate();
                    jplSlideMenu.repaint();
                }
            });
            closeTimer.start();
        }
    }

    public Customer findCustomer(String phoneNumber) {
        return (customerDao.findById(phoneNumber));
    }

    public void billTotalChange(double overallTotal) {
        // Lấy giá trị tiền cọc từ txtDeposit
        Number depositNumber = (Number) txtDeposit.getValue();
        double deposit = depositNumber != null ? depositNumber.doubleValue() : 0;

        // Tính tiền giảm giá
        double discount = overallTotal * sldDiscount.getValue() / 100;

        // Tính số tiền còn lại
        double remaining = overallTotal - discount - deposit;

        // Hiển thị lên field còn lại
        txtRemaining.setText(moneyFormat.format(remaining));
    }

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillBill(currentBill);
        this.fillTypeCbo();
        this.fillProductList(null, null);
        this.fillBillsToTable();
        this.selectTimeRange();
        isBillChanging = false;
        tabMain.setFont(new Font("Segoe UI", Font.BOLD, 14));
    }
    

    @Override
    public void fillBill(Bills entity) {
        currentBill = entity;
        String status;
        Color color;

        switch (entity.getStatus()) {
            case 1:
                status = "Hoàn thành";
                color = new Color(76, 175, 80);
                break;
            case 2:
                status = "Đã Hủy";
                color = new Color(244, 67, 54);
                break;
            default:
                status = "Đang xử lí";
                color = Color.BLACK;
                break;
        }
        txtStatus.setText(status); // set text cho txtStatus
        txtStatus.setForeground(color); // set màu chữ cho txtStatus

        sldDiscount.setValue((int) entity.getDiscount());
        txtDeposit.setValue(entity.getDeposit());
        txtNote.setText(entity.getNote());

        billDetailsList = billDetailDao.findByBillId(entity.getId()); // Trường hợp vừa mở ứng dụng hoặc clear form =>
        // null

        this.fillBillDetail();
        this.fillCustomer(entity.getCustomerId());
        this.setEditable(entity.getStatus());
    }

    @Override
    public void fillBillDetail() {

        if (billDetailsList == null) {
            billDetailsList = new ArrayList<>(); // Nếu như billDetailsList = null => tạo thành 1 array list để thêm
            // product
        }

        DefaultTableModel model = (DefaultTableModel) tblBillDetails.getModel();
        model.setRowCount(0);

        int stt = 1;
        double overallTotal = 0;

        for (var item : billDetailsList) {
            double price;
            if (item.getLength() == 0) {
                price = item.getUnitPrice();
            } else if (item.getDefaultLength() != null) {
                System.out.println(item.getDefaultLength());
                price = (item.getUnitPrice() / item.getDefaultLength()) * item.getLength();
            } else {
                price = item.getUnitPrice() * item.getLength();
            }

            double itemTotal = (price - (price * item.getDiscount() / 100)) * item.getQuantity();
            overallTotal += itemTotal;

            Object[] rowData = {
                stt++, // STT tăng đều
                item.getProductId(),
                item.getProductName(),
                moneyFormat.format(item.getUnitPrice()),
                item.getQuantity(),
                (item.getLength() != 0 ? item.getLength() + "m" : "-"),
                String.format("%.0f%%", item.getDiscount()),
                moneyFormat.format(itemTotal),
                false
            };

            model.addRow(rowData);
        }

        txtOverall.setText(moneyFormat.format(overallTotal));
        this.billTotalChange(overallTotal);
    }

    @Override
    public void fillCustomer(String customerId) {
        currentCustomer = customerDao.findById(customerId);

        txtPhoneNumber.setText(customerId != null ? customerId : "");
        txtCustomerName.setText(currentCustomer != null ? currentCustomer.getFullName() : "");
        txtAddress.setText(currentCustomer != null ? currentCustomer.getAddress() : "");
    }

    @Override
    public Bills getBillsForm() {
        String deposit = txtDeposit.getText().replaceAll("[^\\d.]", ""); // chỉ giữ lại số & dấu chấm

        currentBill.setCustomerId(txtPhoneNumber.getText());
        currentBill.setDeposit(Double.parseDouble(deposit));
        currentBill.setDiscount(sldDiscount.getValue());
        currentBill.setNote(txtNote.getText());
        currentBill.setUsername(XAuth.user.getUsername());

        return currentBill;
    }

    @Override
    public Customer getCustomerForm() {
        Customer customer = new Customer();
        customer.setPhoneNumber(txtPhoneNumber.getText());
        customer.setFullName(txtCustomerName.getText());
        customer.setAddress(txtAddress.getText());

        return customer;
    }

    @Override
    public void save() {

        if (billDetailsList.isEmpty()) {
            XDialog.alert("Chưa có mặt hàng nào trong đơn hàng");
            return;
        }

        // Kiểm tra số lượng trong kho trước khi lưu
        for (BillDetails item : billDetailsList) {
            Product product = productDao.findById(item.getProductId());
            if (product != null) {
                int remainingStock = product.getQuantity() - item.getQuantity();
                if (remainingStock < 0) {
                    XDialog.alert("⚠️ LỖI: Sản phẩm " + product.getName() + " không đủ số lượng trong kho!\n" +
                                 "Yêu cầu: " + item.getQuantity() + ", Có sẵn: " + product.getQuantity());
                    return;
                }
                if (remainingStock <= 100) {
                    XDialog.alert("⚠️ CẢNH BÁO: Sản phẩm " + product.getName() + " sẽ còn " + remainingStock + " trong kho sau khi bán!\n" +
                                 "Vui lòng nhập thêm hàng!");
                }
            }
        }



        Customer customer = this.getCustomerForm();
        if (currentCustomer == null) {
            customerDao.create(customer);
        } else if (isCustomerChanging) {
            customerDao.update(customer);
        }

        Bills bill = this.getBillsForm();
        if (currentBill.getId() == 0) { // Bill chưa tồn tại trong db
            currentBill = billDao.create(bill); // Lấy bill vừa tạo làm currentBill để lúc sau thêm BillDetail
        } else if (isBillChanging) {
            bill.setStatus(currentBill.getStatus());
            billDao.update(bill);
        }

        billDetailsList.forEach(item -> {
            boolean existed = billDetailDao.isBillDetailExisted(item.getId());
            if (!existed) {
                item.setBillId(currentBill.getId()); // Lấy id của currentBill
                billDetailDao.update(item);
            } else {
                billDetailDao.update(item);
            }
        });

        XDialog.alert("Lưu hóa đơn thành công");
        
        isBillChanging = false;
        this.fillBill(bill);
        this.fillBillsToTable();
    }

    @Override
    public void cancle() {
        isBillChanging = true;
        currentBill.setStatus(Bills.Status.CANCELED.ordinal());
        this.save();
    }

    @Override
    public void print() {
        isBillChanging = true;
        currentBill.setStatus(Bills.Status.COMPLETED.ordinal());
        currentBill.setCheckout(new Date());
        this.save();
    }

    @Override
    public void clear() {
        currentBill = new Bills();
        currentCustomer = null;
        this.fillBill(new Bills());

        this.fillCustomer("");
        isBillChanging = false;
    }

    @Override
    public void setEditable(int status) {
        boolean isEditable = (status == 0);

        btnCancle.setEnabled(isEditable);
        btnSave.setEnabled(isEditable);
        btnPrint.setEnabled(isEditable);

        sldDiscount.setEnabled(isEditable);
        txtDeposit.setEnabled(isEditable);
        txtPhoneNumber.setEnabled(isEditable);
        txtCustomerName.setEnabled(isEditable);
        txtAddress.setEnabled(isEditable);
        txtNote.setEnabled(isEditable);
        tblBillDetails.setEnabled(isEditable);

        if (status == 1) {
            btnPrint.setEnabled(true);
        }
    }

    @Override
    public boolean isValidInput() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from
    }

    @Override
    public void fillTypeCbo() {
        typeList = typeDao.findAll();
        cboProductType.removeAllItems(); // Xóa hết item cũ
        cboProductType.addItem("Tất cả");
        cboProductType.setSelectedIndex(0);
        for (ProductType item : typeList) {
            cboProductType.addItem(item.getName()); // Thêm tên từng loại
        }

    }

    @Override
    public void fillThicknesCbo(String typeId) {
        thickList = thicknessDao.findByProductTypeId(typeId);
        cboThickness.removeAllItems(); // Xóa hết item cũ

        if (thickList.size() > 0) { // khi 1 loại có độ dày thì mới fill combo box
            cboThickness.addItem("Tất cả");
            cboThickness.setSelectedIndex(0);

            for (Thickness item : thickList) {
                cboThickness.addItem(item.getThick());
            }
        }
    }

    public void updateBillDetailQuantity(int row, int newValue) {
        BillDetails detail = billDetailsList.get(row);
        detail.setQuantity(newValue);
        this.fillBillDetail();
    }

    public void deleteBillDetailColumn(int row) {
        BillDetails item = billDetailsList.get(row);
        billDetailDao.deleteById(item.getId());
        billDetailsList.remove(row);
        this.fillBillDetail();
    }

    // isType: Có lọc bằng type hay không
    // isThickness: có lọc bằng thickness hay không
    @Override
    public void fillProductList(String typeId, Integer thickId) {
        if (typeId == null) {
            productList = productDao.findAll();
        } else if (thickId == null) {
            productList = productDao.findProductByType(typeId);
        } else {
            productList = productDao.findProductByThick(thickId);
        }
        this.loadProduct();
    }

    private void loadProduct() {// tải và hiển thị các thẻ lên cửa sổ bán hàng
        pnlProducts.removeAll();
        productList.forEach(product -> pnlProducts.add(this.createProduct(product)));
        pnlProducts.revalidate();
        pnlProducts.repaint();
    }

    private JPanel createProduct(Product product) {
        JPanel productCard = new JPanel();
        productCard.setPreferredSize(new Dimension(160, 280));
        productCard.setLayout(new BoxLayout(productCard, BoxLayout.Y_AXIS));
        productCard.setBorder(BorderFactory.createLineBorder(new Color(220, 220, 220)));
        productCard.setBackground(Color.WHITE);

        // Ảnh sản phẩm
        JLabel lblImage = new JLabel();
        lblImage.setPreferredSize(new Dimension(120, 120));
        lblImage.setMaximumSize(new Dimension(120, 120));
        lblImage.setAlignmentX(Component.CENTER_ALIGNMENT);
        lblImage.setHorizontalAlignment(SwingConstants.CENTER);
        lblImage.setVerticalAlignment(SwingConstants.CENTER);

        try {
            ImageIcon icon = new ImageIcon("images/products/product.jpg");
            Image img = icon.getImage().getScaledInstance(120, 120, Image.SCALE_SMOOTH);
            lblImage.setIcon(new ImageIcon(img));
        } catch (Exception e) {
            lblImage.setText("Không có ảnh");
        }

        // Tên sản phẩm
        JLabel lblName = new JLabel(product.getName());
        lblName.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        lblName.setAlignmentX(Component.CENTER_ALIGNMENT);
        lblName.setHorizontalAlignment(SwingConstants.CENTER);
        lblName.setForeground(new Color(51, 51, 51));

        // Giá sản phẩm
        JLabel lblPrice = new JLabel(moneyFormat.format(product.getUnitPrice()));
        lblPrice.setForeground(new Color(220, 53, 69)); // đỏ đô
        lblPrice.setFont(new Font("Segoe UI", Font.BOLD, 16));
        lblPrice.setAlignmentX(Component.CENTER_ALIGNMENT);

        // Nút "Xem thông tin"
        JButton btnDetail = new JButton("Xem thông tin");
        btnDetail.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        btnDetail.setBackground(new Color(245, 245, 245));
        btnDetail.setForeground(Color.BLACK);
        btnDetail.setFocusPainted(false);
        btnDetail.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnDetail.setMaximumSize(new Dimension(160, 36));
        btnDetail.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(200, 200, 200)),
                BorderFactory.createEmptyBorder(5, 10, 5, 10)));
        btnDetail.addActionListener(e -> {
            this.showProductDetail(product);
        });

        // Nút "Mua"
        JButton btnBuy = new JButton("Mua");
        btnBuy.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnBuy.setBackground(new Color(0, 102, 102));
        btnBuy.setForeground(Color.WHITE);
        btnBuy.setFocusPainted(false);
        btnBuy.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnBuy.setMaximumSize(new Dimension(160, 36));
        btnBuy.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnBuy.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(0, 123, 167)),
                BorderFactory.createEmptyBorder(6, 15, 6, 15)));
        btnBuy.addActionListener(e -> {
            this.addProductToBill(product);
        });

        // Add từng thành phần + khoảng cách
        productCard.add(Box.createVerticalStrut(10));
        productCard.add(lblImage);
        productCard.add(Box.createVerticalStrut(10));
        productCard.add(lblName);
        productCard.add(Box.createVerticalStrut(5));
        productCard.add(lblPrice);
        productCard.add(Box.createVerticalStrut(10));
        productCard.add(btnDetail);
        productCard.add(Box.createVerticalStrut(8));
        productCard.add(btnBuy);
        productCard.add(Box.createVerticalGlue());

        return productCard;
    }

    private void showProductDetail(Product product) {
        ProductDetail dialog = new ProductDetail((Frame) this.getOwner(), true);
        dialog.setProduct(product); // Cần khai báo vào BillJDialog @Setter Bill bill
        dialog.setVisible(true);
    }

    private void addProductToBill(Product product) {
        ProductType type = null;
        for (ProductType pt : typeList) {
            if (pt.getId().equals(product.getTypeId())) {
                type = pt;
            }
        }

        int quantity = 0;
        double length = 0;
        if (type.isRequiresSize()) {
            try {
                String defaultValue = type.getDefaultLength() != null ? String.valueOf(type.getDefaultLength()) : "";
                length = Double.parseDouble(XDialog.prompt("Nhập độ dài của sản phẩm", defaultValue));
            } catch (NumberFormatException e) {
                XDialog.alert("Độ dài của sản phẩm phải là một số. Vui lòng nhập lại!");
                return;
            }

            if (length <= 0) {
                XDialog.alert("Độ dài của sản phẩm phải lớn hơn 0. Vui lòng nhập lại!");
                return;
            }
        }

        try {
            quantity = Integer.parseInt(XDialog.prompt("Nhập số lượng sản phẩm"));
        } catch (NumberFormatException e) {
            XDialog.alert("Số lượng của sản phẩm phải là một số. Vui lòng nhập lại!");
            return;
        }

        if (quantity <= 0) {
            XDialog.alert("Số lượng sản phẩm phải lớn hơn 0. Vui lòng nhập lại!");
            return;
        }

        // Kiểm tra số lượng trong kho
        if (quantity > product.getQuantity()) {
            XDialog.alert("⚠️ CẢNH BÁO: Số lượng yêu cầu (" + quantity + ") vượt quá số lượng trong kho (" + product.getQuantity() + ")!\n\n" +
                         "Sản phẩm: " + product.getName() + "\n" +
                         "Mã sản phẩm: " + product.getId() + "\n\n" +
                         "Vui lòng giảm số lượng hoặc nhập thêm hàng!");
            return;
        }

        // Cảnh báo khi số lượng trong kho thấp
        if (product.getQuantity() <= 100) {
            XDialog.alert("⚠️ LƯU Ý: Sản phẩm " + product.getName() + " chỉ còn " + product.getQuantity() + " trong kho!\n" +
                         "Vui lòng cân nhắc nhập thêm hàng.");
        }



        Optional<BillDetails> existing = billDetailsList.stream()
                .filter(bd -> bd.getProductId().equals(product.getId()))
                .findFirst();

        if (existing.isPresent()) {
            existing.get().setQuantity(existing.get().getQuantity() + quantity);
        } else {
            BillDetails details = BillDetails.builder()
                    .billId(currentBill.getId())
                    .productId(product.getId())
                    .unitPrice(product.getUnitPrice())
                    .discount(product.getDiscount())
                    .quantity(quantity)
                    .length(length)
                    .defaultLength(type.getDefaultLength())
                    .productName(product.getName())
                    .build();

            billDetailsList.add(details);
        }

        this.fillBillDetail();
        isBillChanging = true;
    }

    @Override
    public void fillBillsToTable() {
        DefaultTableModel model = (DefaultTableModel) tblBills.getModel();
        model.setRowCount(0);

        billList.forEach(item -> {
            String name = customerDao.findNameByCustomerId(item.getCustomerId());

            Object[] rowData = {
                item.getId(),
                item.getUsername(),
                name,
                item.getCheckin(),
                item.getCheckout()
            };
            model.addRow(rowData);
        });

    }

    @Override
    public void selectTimeRange() {
        TimeRange range = TimeRange.today();
        switch (cboTimeRange.getSelectedIndex()) {
            case 0 ->
                range = TimeRange.today();
            case 1 ->
                range = TimeRange.thisWeek();
            case 2 ->
                range = TimeRange.thisMonth();
            case 3 ->
                range = TimeRange.thisQuarter();
            case 4 ->
                range = TimeRange.thisYear();
        }
        txtBegin.setText(XDate.format(range.getBegin(), "MM/dd/yyyy"));
        txtEnd.setText(XDate.format(range.getEnd(), "MM/dd/yyyy"));
        this.fillBillsByTimeRange();
    }

    private void fillBillsByTimeRange() {

        Date begin = XDate.parse(txtBegin.getText(), "MM/dd/yyyy");
        Date end = XDate.parse(txtEnd.getText(), "MM/dd/yyyy");

        billList = billDao.findOperatingByTimeRange(begin, end);
        this.fillBillsToTable();
    }

    @Override
    public void fillBillBySearch() {
        DefaultTableModel model = (DefaultTableModel) tblBills.getModel();
        model.setRowCount(0);

        String keyWord = txtSearch.getText();
        Integer cboSearch = cboSearchType.getSelectedIndex();

        switch (cboSearch) {
            case 0:
                billList.add(billDao.findOperatingById(Long.valueOf(keyWord)));
                this.fillBillsToTable();
                break;
            case 1:
                billList = billDao.findOperatingAllOfCustomerId(keyWord);
                this.fillBillsToTable();
                break;
            default:
                throw new AssertionError();
        }
    }

    private void applyFilters() {
        String selectedProductTypeId = null;
        Integer selectedThicknessId = null;

        // Lấy TypeId từ cboCategory
        int categoryIndex = cboProductType.getSelectedIndex();
        if (categoryIndex > 0) { // Nếu không phải "Tất cả"
            ProductType selectedType = typeList.get(categoryIndex - 1);
            selectedProductTypeId = selectedType.getId();
        }

        // Lấy ThicknessId từ cboThickness
        int thicknessIndex = cboThickness.getSelectedIndex();
        if (thicknessIndex > 0 && cboThickness.getItemCount() > 0) { // Nếu không phải "Tất cả" và có mục nào đó
            String selectedThickName = (String) cboThickness.getSelectedItem();
            // Tìm Thickness object từ thicknessList dựa vào selectedThickName để lấy ID
            for (Thickness thick : thickList) {
                if (thick.getThick().equals(selectedThickName)) {
                    selectedThicknessId = thick.getId();
                    break;
                }
            }
        }
        fillProductList(selectedProductTypeId, selectedThicknessId);
    }
    

    
    /**
     * Hiển thị dialog quản lý hàng tồn kho
     */
    private void showStockManagementDialog(java.awt.Frame parent) {
        List<Product> allProducts = productDao.findAll();
        
        StringBuilder stockReport = new StringBuilder();
        stockReport.append(" BÁO CÁO HÀNG TỒN KHO\n");
        stockReport.append("=").append("=".repeat(50)).append("\n\n");
        
        // Phân loại sản phẩm theo tình trạng
        List<Product> outOfStock = new ArrayList<>();
        List<Product> lowStock = new ArrayList<>();
        List<Product> normalStock = new ArrayList<>();
        
        for (Product product : allProducts) {
            if (product.getQuantity() == 0) {
                outOfStock.add(product);
            } else if (product.getQuantity() <= 100) {
                lowStock.add(product);
            } else {
                normalStock.add(product);
            }
        }
        
        // Hiển thị sản phẩm hết hàng
        if (!outOfStock.isEmpty()) {
            stockReport.append(" SẢN PHẨM HẾT HÀNG:\n");
            for (Product product : outOfStock) {
                stockReport.append("• ").append(product.getName())
                           .append(" (Mã: ").append(product.getId()).append(")\n");
            }
            stockReport.append("\n");
        }
        
        // Hiển thị sản phẩm sắp hết
        if (!lowStock.isEmpty()) {
            stockReport.append(" SẢN PHẨM SẮP HẾT (≤100):\n");
            for (Product product : lowStock) {
                stockReport.append("• ").append(product.getName())
                           .append(" (Mã: ").append(product.getId()).append(")")
                           .append(" - Còn lại: ").append(product.getQuantity()).append(" sản phẩm\n");
            }
            stockReport.append("\n");
        }
        
        // Hiển thị sản phẩm bình thường
        if (!normalStock.isEmpty()) {
            stockReport.append(" SẢN PHẨM ĐỦ HÀNG (>100):\n");
            for (Product product : normalStock) {
                stockReport.append("• ").append(product.getName())
                           .append(" (Mã: ").append(product.getId()).append(")")
                           .append(" - Còn lại: ").append(product.getQuantity()).append(" sản phẩm\n");
            }
            stockReport.append("\n");
        }
        
        // Thống kê tổng quan
        stockReport.append(" THỐNG KÊ TỔNG QUAN:\n");
        stockReport.append("• Tổng số sản phẩm: ").append(allProducts.size()).append("\n");
        stockReport.append("• Sản phẩm hết hàng: ").append(outOfStock.size()).append("\n");
        stockReport.append("• Sản phẩm sắp hết: ").append(lowStock.size()).append("\n");
        stockReport.append("• Sản phẩm đủ hàng: ").append(normalStock.size()).append("\n");
        
        XDialog.alert(stockReport.toString());
    }
    

}
